name: "Nível 2: Testes Automatizados"
on:
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  CHALLENGE_LEVEL: 2
  CHALLENGE_NAME: "testes-automatizados"
  COVERAGE_MIN: 20 # Cobertura mínima exigida em porcentagem

jobs:
  tests-and-coverage:
    name: "Testes e Cobertura"
    runs-on: ubuntu-latest
    outputs:
      coverage: ${{ steps.coverage.outputs.coverage }}

    steps:
      - name: "Checkout do código"
        uses: actions/checkout@v4

      - name: "Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: "Instalar dependências"
        run: npm ci || npm install

      - name: "Rodar testes e gerar coverage"
        run: npm test

      - name: "Extrair porcentagem de cobertura" # Esse step será validado pelo desafio, não altere o nome. No final, ele deve gerar o output "coverage" com a porcentagem de cobertura.
        id: coverage
        run: |
          if [ -f coverage/coverage-summary.json ]; then
            COVERAGE=$(node -p "JSON.parse(require('fs').readFileSync('coverage/coverage-summary.json', 'utf8')).total.statements.pct")
            echo "Coverage: $COVERAGE%"
            echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
          else
            echo "Arquivo coverage-summary.json não encontrado, usando 0"
            echo "Coverage: 0%"
            echo "coverage=0" >> $GITHUB_OUTPUT
          fi

      - name: "Validar cobertura mínima"
        run: |
          COVERAGE=${{ steps.coverage.outputs.coverage }}
          echo "Cobertura atual: $COVERAGE%"
          echo "Cobertura mínima exigida: ${{ env.COVERAGE_MIN }}%"
          
          # Converter para inteiro para comparação
          COVERAGE_INT=$(printf "%.0f" $COVERAGE)
          
          if [ $COVERAGE_INT -lt ${{ env.COVERAGE_MIN }} ]; then
            echo "❌ FALHA: Cobertura de $COVERAGE% está abaixo do mínimo de ${{ env.COVERAGE_MIN }}%"
            echo "Por favor, adicione mais testes para aumentar a cobertura."
            exit 1
          else
            echo "✅ SUCESSO: Cobertura de $COVERAGE% atende o mínimo de ${{ env.COVERAGE_MIN }}%"
          fi

      - name: "Upload do relatório de cobertura"
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: coverage/

  generate-certificate: # DAQUI PARA BAIXO, NÃO ALTERAR
      name: "Desafio Nível 2 - Certificado"
      runs-on: ubuntu-latest
      needs: tests-and-coverage
      if: success() && needs.tests-and-coverage.outputs.coverage != ''

      steps:
        - name: "Gerar certificado"
          run: |
            mkdir -p certificates
            cat > certificates/level-2-certificate.md << EOF
            # Certificado de Conclusão - Nível 2

            **Descomplicando Github Actions - GitHub Actions Edition**
            ---

            Este certificado atesta que **${{ github.actor }}** concluiu com sucesso:
            ## Nível 2: Testes Automatizados

            **Competências desenvolvidas:**
            - Automação de testes
            - Análise de cobertura
            - Lógica de validação com coverage mínimo
            - Upload de artefatos

            **Cobertura:** >= ${{ env.COVERAGE_MIN }}%
            **Data de conclusão:** $(date)
            **Repositório:** ${{ github.repository }}
            **Workflow:** ${{ github.run_id }}

            ---
            **Badge conquistado:** Testes Automatizados

            ---
            *Certificado gerado automaticamente pelo GitHub Actions*
            *LINUXtips*
            EOF

        - name: "Upload do certificado"
          uses: actions/upload-artifact@v4
          with:
            name: level-2-certificate
            path: certificates/
            retention-days: 30